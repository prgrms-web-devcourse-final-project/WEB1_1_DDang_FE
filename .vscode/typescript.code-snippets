{
  "Typescript React Styled Components": {
    "scope": "typescript",
    "prefix": "sc",
    "body": [
      "import { styled } from 'styled-components'",
      "",
      "export const ${1:${TM_DIRECTORY/^.+\\\\(.*)$/$1/}} = styled.div`",
      " ${2}",
      "`;",
    ],
  },
  "Typescript React Styled Components in Mac": {
    "scope": "typescript",
    "prefix": "scmac",
    "body": [
      "import { styled } from 'styled-components'",
      "",
      "export const ${1:${TM_DIRECTORY/.*\\/(.*)$/$1/}} = styled.div`",
      " ${2}",
      "`;",
    ],
  },
  "Axios Request Function": {
    "prefix": "api-req",
    "body": [
      "import { AxiosError } from 'axios';",
      "import { APIResponse, ErrorResponse } from '~types/api';",
      "import { axiosInstance } from '~apis/axiosInstance';",
      "",
      "export type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Request = {",
      "  ${2}",
      "}",
      "",
      "export type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Response = {",
      "  ${3}",
      "}",
      "",
      "export const ${4:${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}} = async (req: ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Request): Promise<APIResponse<${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Response>> => {",
      "  try {",
      "    const { data } = await axiosInstance.${5|get,post,put,patch,delete|}<APIResponse<${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Response>>(",
      "      `/${6:endpoint}`,",
      "       req",
      "    );",
      "    return data;",
      "  } catch (error) {",
      "    if (error instanceof AxiosError) {",
      "      const { response } = error as AxiosError<ErrorResponse>;",
      "",
      "      if (response) {",
      "        const { code, message } = response.data",
      "        switch (code) {",
      "          case 400:",
      "            throw new Error(message || '잘못된 요청입니다.')",
      "          case 401:",
      "            throw new Error(message || '인증에 실패했습니다.')",
      "          case 500:",
      "            throw new Error(message || '서버 오류가 발생했습니다.')",
      "          default:",
      "            throw new Error(message || '알 수 없는 오류가 발생했습니다.')",
      "        }",
      "      } else {",
      "        // 요청 자체가 실패한 경우",
      "        throw new Error('네트워크 연결을 확인해주세요')",
      "      }",
      "    }",
      "",
      "    console.error('예상치 못한 에러:', error);",
      "    throw new Error('다시 시도해주세요');",
      "  }",
      "};",
    ],
    "description": "Axios request function template with error handling",
  },
}
